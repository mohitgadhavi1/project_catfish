const routes = {
	dataStructure: {
		_self: "data_structures",
		stack: "data_structures/stack",
		queue: "data_structures/queue",
		priorityQueue: "data_structures/priority-queue",
		linked_list: "data_structures/linked_list",
		tree: "data_structures/tree",
		trie: "data_structures/trie",
		graph: "data_structures/graph",
		heap: "data_structures/heap",
		hashTable: "data_structures/hash-table",
		lruCache: "data_structures/lru-cache",
		disjointSet: "data_structures/disjoint-set",
		bloomFilter: "data_structures/bloom-filter",
	},
	algorithms: {
		_self: "algorithms",
		cryptography: "algorithms/cryptography",
		graph: {
			_self: "algorithms/graph",
			articulationPoints: "algorithms/graph/articulation-point",
			bellmanFord: "algorithms/graph/bellman-ford",
			breadthFirstSearch: "algorithms/graph/breadth-first-search",
			bridges: "algorithms/graph/bridges",
			depthFirstSearch: "algorithms/graph/depth-first-search",
			detectCycle: "algorithms/graph/detect-cycle",
			dijkstra: "algorithms/graph/dijkstra",
			eulerianPath: "algorithms/graph/eulerian-path",
			floydWarshall: "algorithms/graph/floyd-warshall",
			hamiltonianCycle: "algorithms/graph/hamiltonian-cycle",
			kruskal: "algorithms/graph/kruskal",
			prim: "algorithms/graph/prim",
			stronglyConnectedComponents:
				"algorithms/graph/strongly-connected-components",
			topologicalSorting: "algorithms/graph/topological-sorting",
			travellingSalesman: "algorithms/graph/travelling-salesman",
		},
		imageProcessing: "algorithms/image-processing",
		linkedList: {
			_self: "algorithms/linked-list",
			reverseTraversal: "algorithms/linked-list/reverse-traversal",
			traversal: "algorithms/linked-list/traversal",
		},
		math: {
			_self: "algorithms/math",
			binaryFloatingPoint: "algorithms/math/binary-floating-point",
			bits: "algorithms/math/bits",
			complexNumber: "algorithms/math/complex-number",
			euclideanAlgorithm: "algorithms/math/euclidean-algorithm",
			euclideanDistance: "algorithms/math/euclidean-distance",
			factorial: "algorithms/math/factorial",
			fastPowering: "algorithms/math/fast-powering",
			fibonacci: "algorithms/math/fibonacci",
			fourierTransform: "algorithms/math/fourier-transform ",
			hornerMethod: "algorithms/math/horner-method",
			integerPartition: "algorithms/math/integer-partition",
			isPowerOfTwo: "algorithms/math/is-power-of-two",
			leastCommonMultiple: "algorithms/math/least-common-multiple",
			liuHui: "algorithms/math/liu-hui",
			matrix: "algorithms/math/matrix",
			pascalTriangle: "algorithms/math/pascal-triangle",
			primalityTest: "algorithms/math/primality-test",
			primeFactors: "algorithms/math/prime-factors",
			radian: "algorithms/math/radian",
			sieveOfEratosthenes: "algorithms/math/sieve-of-eratosthenes",
			squareRoot: "algorithms/math/integer-partition/square-root",
		},
		ml: "algorithms/ml",
		search: {
			_self: "algorithms/search",
			binarySearch: "algorithms/search/binary-search",
			interpolationSearch: "algorithms/search/interpolation-search",
			jumpSearch: "algorithms/search/jump-search",
			linearSearch: "algorithms/search/linear-search",
		},
		sets: "algorithms/sets",
		sorting: {
			_self: "algorithms/sorting",
			bubbleSort: "algorithms/sorting/bubble-sort",
			bucketSort: "algorithms/sorting/bucket-sort",
			countingSort: "algorithms/sorting/counting-sort",
			heapSort: "algorithms/sorting/heap-sort",
			insertionSort: "algorithms/sorting/insertion-sort",
			mergeSort: "algorithms/sorting/merge-sort",
			quickSort: "algorithms/sorting/quick-sort",
			radixSort: "algorithms/sortin/radix-sorg",
			selectionSort: "algorithms/sorting/selection-sort",
			shellSort: "algorithms/sorting/shell-sort",
			Sort: "algorithms/sorting/Sort.js",
			SortTester: "algorithms/sorting/SortTester.js",
		},
		statistics: "algorithms/statistics/weighted-random",
		string: {
			_self: "algorithms/string",
			hammingDistance: "algorithms/string/hamming-distance",
			knuthMorrisPratt: "algorithms/string/knuth-morris-pratt",
			levenshteinDistance: "algorithms/string/levenshtein-distance",
			longestCommonSubstring: "algorithms/string/longest-common-substring",
			palindrome: "algorithms/string/palindrome",
			rabinKarp: "algorithms/string/rabin-karp",
			regularExpressionMatching:
				"algorithms/string/regular-expression-matching",
			zAlgorithm: "algorithms/string/z-algorithm",
		},
		tree: {
			_self: "algorithms/tree",
			breadthFirstSearch: "algorithms/tree/breadth-first-search",
			depthFirstSearch: "algorithms/tree/depth-first-search",
		},
		uncategorized: {
			_self: "algorithms/uncategorized",
			bestTimeToBuySellStocks:
				"algorithms/uncategorized/best-time-to-buy-sell-stocks",
			hanoiTower: "algorithms/uncategorized/hanoi-tower",
			jumpGame: "algorithms/uncategorized/jump-game",
			knightTour: "algorithms/uncategorized/knight-tour",
			nQueens: "algorithms/uncategorized/n-queens",
			rainTerraces: "algorithms/uncategorized/rain-terraces",
			recursiveStaircase: "algorithms/uncategorized/recursive-staircase",
			squareMatrixRotation: "algorithms/uncategorized/square-matrix-rotation",
			uniquePaths: "algorithms/uncategorized/unique-paths",
		},
	},
};
